import{U as l}from"./Mrxrc3kq.js";const c=l("game",{state:()=>({balance:100,dice:[1,1,1,1,1],rolling:!1,history:[],rollCount:0,lastCombination:-1}),getters:{ALL_USER_WINS(t){return t.history.reduce((r,i)=>r+(i.win||0),0)},ALL_USER_BETS(t){return t.history.reduce((r,i)=>r+(i.bet||0),0)},RTP(t){return t.ALL_USER_BETS===0?0:t.ALL_USER_WINS/t.ALL_USER_BETS*100}},actions:{rollDice(t){t<=0||t>this.balance||(this.rolling=!0,this.balance-=t,this.rollCount++,this.lastCombination=-1,setTimeout(()=>{this.dice=Array.from({length:5},()=>Math.floor(Math.random()*6)+1);const r=this.getMultiplier(this.dice),i=t*r;this.balance+=i,this.history.push({experiment:this.rollCount,balance:this.balance,bet:t,win:i}),this.rolling=!1,this.lastCombination=r},1e3))},getMultiplier(t){const r={};t.forEach(e=>r[e]=(r[e]||0)+1);const i=Object.values(r).sort((e,n)=>n-e),s=[...t].sort((e,n)=>e-n).every((e,n,o)=>n===0||e===o[n-1]+1);return i.includes(5)?4:s?5:i.includes(3)&&i.includes(2)?3:i.includes(2)?2:0}}});export{c as u};
